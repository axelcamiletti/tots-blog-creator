import OpenAI from 'openai';
import { GeneratedArticle, ResearchResult } from '../interfaces/interfaces';
const { tavily } = require("@tavily/core");


export class OpenAIService {
    private openai: OpenAI;
    private tabilyApiKey: any;

    constructor() {
        this.openai = new OpenAI({
            apiKey: process.env.OPENAI_API_KEY!,
        });
        
        this.tabilyApiKey = tavily({ apiKey: process.env.TAVILY_API_KEY! });
    }

    private cleanJsonResponse(content: string): string {
        content = content.replace(/```json\s*/g, '').replace(/```\s*$/g, '');
        content = content.trim();
        return content;
    }

    /* async executeArticleCreation(topic: string): Promise<ResearchResult> {
        console.log('üîç Ejecutando investigaci√≥n profunda sobre:', topic);

        try {

            const query = 'ac√° va el query del usuario';

            // Paso 3: B√∫squeda web con Tavily
            const webResults = await this.searchWeb(query);
            
            
        } catch (error) {
            console.error('‚ùå Error en investigaci√≥n profunda:', error);
            throw new Error(`Failed to execute deep research: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    } */

    /* private async clarifyResearchPrompt(topic: string): Promise<string> {
        console.log('üîç Clarificando prompt para investigaci√≥n profunda...');
        
        const instructions = `
Eres un asistente que mejora prompts de investigaci√≥n. Tu trabajo es tomar una tarea de investigaci√≥n b√°sica y producir instrucciones detalladas para un investigador que completar√° la tarea.

DIRECTRICES:
1. **Maximizar Especificidad y Detalle**
- Incluir todas las preferencias conocidas del usuario y listar expl√≠citamente atributos clave o dimensiones a considerar.

2. **Completar Dimensiones No Declaradas pero Necesarias**
- Si ciertos atributos son esenciales para un output significativo pero el usuario no los ha proporcionado, declarar expl√≠citamente que son abiertos o sin restricci√≥n espec√≠fica.

3. **Evitar Suposiciones No Justificadas**
- Si el usuario no ha proporcionado un detalle particular, no inventar uno.

4. **Usar Primera Persona**
- Redactar la solicitud desde la perspectiva del usuario.

5. **Fuentes y Idioma**
- Para contenido acad√©mico o cient√≠fico, priorizar enlaces directos a papers originales o publicaciones oficiales.
- Responder en espa√±ol a menos que se especifique otro idioma.

NO completes la investigaci√≥n t√∫ mismo, solo proporciona instrucciones sobre c√≥mo completarla.`;

        const inputText = `
Investigar a profundidad sobre este tema para crear contenido de blog de alta calidad:

TEMA: ${topic}

Necesito una investigaci√≥n exhaustiva que cubra contexto, tendencias actuales, puntos clave, conceptos relacionados, opiniones de expertos y estad√≠sticas relevantes.`;

        try {
            const response = await this.openai.chat.completions.create({
                model: 'gpt-4.1',
                messages: [{ 
                    role: 'system', 
                    content: instructions 
                }, { 
                    role: 'user', 
                    content: inputText 
                }],
            });

            const clarifiedPrompt = response.choices[0].message.content || inputText;
            console.log('‚úÖ Prompt clarificado correctamente');
            
            return clarifiedPrompt;
        } catch (error) {
            console.error('‚ùå Error clarificando prompt:', error);
            return inputText;
        }
    } */

    /* private async generateSearchQuery(topic: string): Promise<string> {
        console.log('üîç Generando query para b√∫squeda web');

        const inputText = `Genera un texto de b√∫squeda optimizado para encontrar informaci√≥n relevante sobre: ${topic}

Responde solo con el texto de b√∫squeda, sin explicaciones adicionales.`;

        try {
            const response = await this.openai.chat.completions.create({
                model: "gpt-4.1",
                messages: [{ 
                    role: 'user', 
                    content: inputText 
                }],
            });

            const searchQuery = response.choices[0].message.content || topic;
            console.log('‚úÖ Query para b√∫squeda generado:', searchQuery);
            
            return searchQuery;
        } catch (error) {
            console.error('‚ùå Error generando query:', error);
            return topic;
        }
    } */

    async searchWeb(query: string): Promise<any[]> {
        console.log('üåê Realizando b√∫squeda web con Tavily...');
        
        try {
            const results = await this.tabilyApiKey.search(query, {
                search_depth: "advanced",
                max_results: 5
            });

            console.log(`‚úÖ Encontrados ${results.results.length} resultados web`);
            return results.results;
        } catch (error) {
            console.error('‚ùå Error en b√∫squeda web:', error);
            return [];
        }
    }


    async generateArticle(topic: string, researchData: ResearchResult): Promise<GeneratedArticle> {
        console.log('üìù Generando art√≠culo con IA...');
        
        const prompt = `
Eres un experto redactor de contenido t√©cnico. Crea un art√≠culo de blog COMPLETO en formato Markdown sobre el tema: "${topic}"

INFORMACI√ìN DE INVESTIGACI√ìN:
${researchData.content}

FUENTES DISPONIBLES:
${researchData.sources.join('\n')}

REQUISITOS DEL ART√çCULO:
1. **Formato**: Markdown estricto (.md)
2. **Estructura**: T√≠tulo H1, subt√≠tulos H2/H3, p√°rrafos bien organizados
3. **Longitud**: 1500-2500 palabras
4. **Estilo**: Profesional, educativo, f√°cil de leer
5. **Elementos**: Listas, enlaces, citas relevantes
6. **SEO**: Optimizado para motores de b√∫squeda

EVITA ABSOLUTAMENTE:
- Inventar estad√≠sticas o casos de estudio falsos
- Usar un tono rob√≥tico o demasiado estructurado
- Mencionar empresas espec√≠ficas a menos que est√©n en las fuentes
- Crear listas excesivamente largas o formateadas artificialmente
- Sonar como contenido generado por IA

ASIGNACIONES AUTOM√ÅTICAS:
- segment: Selecciona el m√°s apropiado entre "IA", "Apps m√≥viles", "Sportech", "Ciberseguridad"
- author: "TOTS Team"
- status: "draft"
- sources: Incluye las URLs de las fuentes proporcionadas
- header_image_prompt: Crea un prompt detallado para generar una imagen conceptual evitando clich√©s
`;

        try {
            const response = await this.openai.responses.create({
                model: "o3",
                reasoning: { effort: "high" },
                input: [{ role: 'user', content: prompt }],
                text: {
                    format: {
                        type: "json_schema",
                        name: "article_response",
                        schema: {
                            type: "object",
                            properties: {
                                title: {
                                    type: "string",
                                    description: "T√≠tulo principal del art√≠culo"
                                },
                                meta_title: {
                                    type: "string",
                                    description: "Meta t√≠tulo SEO (50-60 caracteres)"
                                },
                                meta_description: {
                                    type: "string",
                                    description: "Meta descripci√≥n SEO (150-160 caracteres)"
                                },
                                content: {
                                    type: "string",
                                    description: "Contenido completo en formato Markdown"
                                },
                                segment: {
                                    type: "string",
                                    enum: ["IA", "Apps m√≥viles", "Sportech", "Ciberseguridad"],
                                    description: "Segmento del art√≠culo"
                                },
                                tags: {
                                    type: "array",
                                    items: {
                                        type: "string"
                                    },
                                    description: "Tags del art√≠culo (3-5 tags)"
                                },
                                category: {
                                    type: "string",
                                    description: "Categor√≠a principal del art√≠culo"
                                },
                                author: {
                                    type: "string",
                                    description: "Autor del art√≠culo"
                                },
                                sources: {
                                    type: "array",
                                    items: {
                                        type: "string"
                                    },
                                    description: "URLs de fuentes utilizadas"
                                },
                                status: {
                                    type: "string",
                                    enum: ["draft", "in-progress", "published", "paused"],
                                    description: "Estado del art√≠culo"
                                },
                                header_image_prompt: {
                                    type: "string",
                                    description: "Prompt para generar imagen de cabecera"
                                }
                            },
                            required: ["title", "meta_title", "meta_description", "content", "segment", "tags", "category", "author", "sources", "status", "header_image_prompt"],
                            additionalProperties: false
                        },
                        strict: true
                    }
                }
            });

            const article = JSON.parse(response.output_text || '{}');
            
            console.log(`‚úÖ Art√≠culo generado con structured output: "${article.title}"`);
            
            return article as GeneratedArticle;
        } catch (error) {
            console.error('‚ùå Error generando art√≠culo:', error);
            throw new Error(`Failed to generate article: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }


    // Funci√≥n de test para debuggear la respuesta de generaci√≥n de im√°genes
    async testImageGeneration(): Promise<void> {
        console.log('üß™ INICIANDO TEST DE GENERACI√ìN DE IM√ÅGENES...');
        
        try {
            const testPrompt = "A simple blue square on white background";
            
            console.log('üîç Enviando request a OpenAI con prompt:', testPrompt);
            
            const response = await this.openai.images.generate({
                model: "gpt-image-1",
                prompt: testPrompt,
                size: "1536x1024",
                quality: "high",
                n: 1
            });

            console.log('üîç === AN√ÅLISIS COMPLETO DE RESPUESTA ===');
            console.log('üîç Tipo de response:', typeof response);
            console.log('üîç Propiedades de response:', Object.keys(response));
            console.log('üîç Response completo:', JSON.stringify(response, null, 2));
            
            if (response.data) {
                console.log('üîç response.data existe, longitud:', response.data.length);
                console.log('üîç Tipo de response.data[0]:', typeof response.data[0]);
                console.log('üîç Propiedades de response.data[0]:', Object.keys(response.data[0]));
                
                const imageData = response.data[0];
                console.log('üîç imageData completo:', JSON.stringify(imageData, null, 2));
                
                // Verificar propiedades est√°ndar
                console.log('üîç imageData.url:', imageData.url || 'NO PRESENTE');
                console.log('üîç imageData.b64_json:', imageData.b64_json ? 'PRESENTE (longitud: ' + imageData.b64_json.length + ')' : 'NO PRESENTE');
                
                // Verificar propiedades custom con casting
                const imageDataAny = imageData as any;
                console.log('üîç Todas las propiedades:', Object.getOwnPropertyNames(imageData));
                
                for (const prop of Object.getOwnPropertyNames(imageData)) {
                    const value = imageDataAny[prop];
                    console.log(`üîç ${prop}:`, typeof value, value?.constructor?.name || 'undefined');
                    if (typeof value === 'string' && value.length > 100) {
                        console.log(`üîç ${prop} (truncado):`, value.substring(0, 100) + '...');
                    }
                }
            } else {
                console.log('‚ùå response.data NO EXISTE');
            }
            
            console.log('üß™ === FIN DEL TEST ===');
            
        } catch (error) {
            console.error('‚ùå Error en test de imagen:', error);
        }
    }

    async generateHeaderImage(header_image_prompt: string): Promise<Buffer> {
        console.log('üñºÔ∏è Generando imagen de cabecera del art√≠culo...');
        console.log('üìù Prompt:', header_image_prompt);
        
        try {
            const response = await this.openai.images.generate({
                model: "gpt-image-1",
                prompt: header_image_prompt,
                size: "1536x1024",
                quality: "high",
                n: 1
            });

            console.log('üîç Verificando respuesta de GPT-IMAGE-1...');
            
            if (!response.data || response.data.length === 0) {
                throw new Error('No se gener√≥ ninguna imagen');
            }

            const imageData = response.data[0];
            
            // La imagen est√° en b64_json seg√∫n el test
            if (imageData.b64_json) {
                console.log('‚úÖ Imagen recibida en formato base64, longitud:', imageData.b64_json.length);
                const buffer = Buffer.from(imageData.b64_json, 'base64');
                console.log('‚úÖ Imagen convertida a buffer correctamente, tama√±o:', buffer.length, 'bytes');
                return buffer;
            }
            
            // Fallback a URL si est√° disponible (aunque seg√∫n el test no deber√≠a estar)
            if (imageData.url) {
                console.log('‚úÖ Imagen recibida como URL, descargando...');
                const imageResponse = await fetch(imageData.url);
                if (!imageResponse.ok) {
                    throw new Error(`Error descargando imagen: ${imageResponse.statusText}`);
                }

                const arrayBuffer = await imageResponse.arrayBuffer();
                const buffer = Buffer.from(arrayBuffer);
                console.log('‚úÖ Imagen descargada y convertida correctamente');
                return buffer;
            }
            
            console.error('‚ùå No se encontr√≥ imagen en b64_json ni url');
            console.error('‚ùå Propiedades disponibles:', Object.keys(imageData));
            throw new Error('No se recibi√≥ imagen en formato esperado');

        } catch (error) {
            console.error('‚ùå Error generando imagen:', error);
            throw new Error(`Error cr√≠tico generando imagen: ${error}`);
        }
    }
}
